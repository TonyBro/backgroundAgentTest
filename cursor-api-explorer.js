// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ DevTools –∫–æ–Ω—Å–æ–ª–∏ Cursor –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è API

class CursorAPIExplorer {
  constructor() {
    this.foundFunctions = [];
    this.foundObjects = [];
  }

  // –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —á–∞—Ç–æ–º
  searchChatFunctions(obj = window, path = 'window', depth = 0, maxDepth = 3) {
    if (depth > maxDepth || !obj || typeof obj !== 'object') return;
    
    try {
      Object.keys(obj).forEach(key => {
        try {
          const value = obj[key];
          const currentPath = `${path}.${key}`;
          
          // –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
          if (typeof value === 'function') {
            const funcName = key.toLowerCase();
            if (funcName.includes('send') || 
                funcName.includes('post') ||
                funcName.includes('chat') || 
                funcName.includes('message') ||
                funcName.includes('input') ||
                funcName.includes('submit')) {
              this.foundFunctions.push({
                path: currentPath,
                name: key,
                func: value,
                toString: value.toString().substring(0, 200) + '...'
              });
            }
          }
          
          // –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤
          if (typeof value === 'object' && value !== null) {
            const objName = key.toLowerCase();
            if (objName.includes('chat') || 
                objName.includes('ai') || 
                objName.includes('llm') ||
                objName.includes('editor') ||
                objName.includes('input') ||
                objName.includes('message')) {
              this.foundObjects.push({
                path: currentPath,
                name: key,
                obj: value,
                keys: Object.keys(value).slice(0, 10)
              });
              
              // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
              this.searchChatFunctions(value, currentPath, depth + 1, maxDepth);
            }
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º
        }
      });
    } catch (e) {
      console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ ${path}:`, e.message);
    }
  }

  // –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
  searchSpecialObjects() {
    const specialPaths = [
      'window.vscode',
      'window.cursor',
      'window.__cursor__',
      'window.electron',
      'window.require',
      'window.process',
      'window.global',
      'document.body.__vue__',
      'document.body.__react__',
      'window.Vue',
      'window.React'
    ];

    specialPaths.forEach(path => {
      try {
        const obj = eval(path);
        if (obj) {
          console.log(`–ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç: ${path}`, obj);
          this.searchChatFunctions(obj, path, 0, 2);
        }
      } catch (e) {
        // –û–±—ä–µ–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }
    });
  }

  // –ü–æ–∏—Å–∫ Event Listeners –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–µ
  findEventListeners() {
    const events = ['keydown', 'keyup', 'click', 'input', 'submit'];
    events.forEach(eventType => {
      const listeners = getEventListeners ? getEventListeners(document)[eventType] : [];
      if (listeners && listeners.length > 0) {
        console.log(`Event listeners –¥–ª—è ${eventType}:`, listeners);
      }
    });
  }

  // –ê–Ω–∞–ª–∏–∑ DOM –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–∞—Ç–∞
  analyzeChatDOM() {
    const chatSelectors = [
      '[class*="chat"]',
      '[class*="message"]',
      '[class*="input"]',
      '[id*="chat"]',
      '[id*="message"]',
      'textarea',
      'input[type="text"]',
      '[contenteditable="true"]'
    ];

    const chatElements = [];
    chatSelectors.forEach(selector => {
      try {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
          chatElements.push({
            selector,
            element: el,
            classes: el.className,
            id: el.id,
            tagName: el.tagName
          });
        });
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      }
    });

    return chatElements;
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  testFunction(funcInfo, testMessage = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ") {
    console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é: ${funcInfo.path}`);
    
    try {
      // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–∑–æ–≤–∞
      const attempts = [
        () => funcInfo.func(testMessage),
        () => funcInfo.func({ message: testMessage }),
        () => funcInfo.func({ content: testMessage }),
        () => funcInfo.func({ text: testMessage }),
        () => funcInfo.func({ type: 'message', content: testMessage })
      ];

      attempts.forEach((attempt, index) => {
        try {
          const result = attempt();
          console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${index + 1} –¥–ª—è ${funcInfo.path}:`, result);
        } catch (e) {
          console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${index + 1} –¥–ª—è ${funcInfo.path} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, e.message);
        }
      });
    } catch (e) {
      console.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${funcInfo.path}:`, e);
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
  explore() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ Cursor API...');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.foundFunctions = [];
    this.foundObjects = [];
    
    // –ü–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ window
    this.searchChatFunctions();
    
    // –ü–æ–∏—Å–∫ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
    this.searchSpecialObjects();
    
    // –ê–Ω–∞–ª–∏–∑ DOM
    const chatElements = this.analyzeChatDOM();
    
    // –ü–æ–∏—Å–∫ Event Listeners
    this.findEventListeners();
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:');
    console.log('\nüîß –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
    this.foundFunctions.forEach((func, index) => {
      console.log(`${index + 1}. ${func.path}`);
      console.log(`   –ö–æ–¥: ${func.toString}`);
    });
    
    console.log('\nüì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:');
    this.foundObjects.forEach((obj, index) => {
      console.log(`${index + 1}. ${obj.path}`);
      console.log(`   –ö–ª—é—á–∏: [${obj.keys.join(', ')}]`);
    });
    
    console.log('\nüéØ –≠–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞ –≤ DOM:');
    chatElements.forEach((el, index) => {
      console.log(`${index + 1}. ${el.tagName} (${el.selector})`);
      console.log(`   ID: ${el.id}, Classes: ${el.classes}`);
    });
    
    return {
      functions: this.foundFunctions,
      objects: this.foundObjects,
      domElements: chatElements
    };
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  testAllFunctions(testMessage = "ü§ñ –¢–µ—Å—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞") {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...');
    
    this.foundFunctions.forEach(func => {
      this.testFunction(func, testMessage);
    });
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
const explorer = new CursorAPIExplorer();
const results = explorer.explore();

// –î–µ–ª–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.cursorExplorer = explorer;

console.log('\n‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π window.cursorExplorer.testAllFunctions() –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π');
console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π window.cursorExplorer.testFunction(—Ñ—É–Ω–∫—Ü–∏—è, "—Å–æ–æ–±—â–µ–Ω–∏–µ") –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
results; 