/**
 * Cursor Background Agent - Server Agent (Agent1)
 * –ü–µ—Ä–≤—ã–π –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ TCP —Å–µ—Ä–≤–µ—Ä –∏ –∂–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
 */

const net = require('net');

class CursorBackgroundAgentServer {
    constructor(port = 3001) {
        this.agentId = 'Agent1-Server';
        this.port = port;
        this.startTime = new Date();
        this.sessionId = this.generateSessionId();
        this.isRunning = false;
        
        // TCP —Å–µ—Ä–≤–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç
        this.server = null;
        this.clientSocket = null;
        this.isClientConnected = false;
        this.handshakeComplete = false;
        
        // –°—á–µ—Ç—á–∏–∫–∏ –ø–∏–Ω–≥-–ø–æ–Ω–≥
        this.pingCount = 0;
        this.pongCount = 0;
    }

    generateSessionId() {
        return Math.random().toString(36).substring(2, 15);
    }

    start() {
        if (this.isRunning) {
            this.log('üîÑ –°–µ—Ä–≤–µ—Ä –∞–≥–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.isRunning = true;
        this.log('üöÄ –ó–∞–ø—É—Å–∫ Agent1 –∫–∞–∫ TCP —Å–µ—Ä–≤–µ—Ä–∞');
        this.log(`üìã Session ID: ${this.sessionId}`);
        this.log(`üîß PID: ${process.pid}`);
        this.log(`üåê –ü–æ—Ä—Ç: ${this.port}`);

        this.createTCPServer();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', () => this.stop());
        process.on('SIGTERM', () => this.stop());
        process.on('SIGUSR1', () => this.showStatus());
    }

    createTCPServer() {
        this.server = net.createServer((socket) => {
            this.log('üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            this.clientSocket = socket;
            this.isClientConnected = true;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            socket.on('data', (data) => {
                try {
                    const message = JSON.parse(data.toString());
                    this.handleClientMessage(message);
                } catch (error) {
                    this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
                }
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            socket.on('close', () => {
                this.log('üö™ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
                this.isClientConnected = false;
                this.handshakeComplete = false;
                this.clientSocket = null;
            });

            socket.on('error', (error) => {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞: ${error.message}`);
            });

            // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Ö—ç–Ω–¥—à–µ–π–∫ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            setTimeout(() => {
                this.initiateHandshake();
            }, 500);
        });

        this.server.listen(this.port, () => {
            this.log(`‚úÖ TCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
            this.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Agent2...');
        });

        this.server.on('error', (error) => {
            this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
        });
    }

    handleClientMessage(message) {
        this.log(`üì® [${this.agentId}] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç ${message.sender}: ${message.type} - "${message.data}"`);

        switch (message.type) {
            case 'ready':
                this.handleClientReady(message);
                break;
            case 'handshake_response':
                this.handleHandshakeResponse(message);
                break;
            case 'pong':
                this.handlePong(message);
                break;
            default:
                this.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}`);
        }
    }

    handleClientReady(message) {
        this.log('‚úÖ Agent2 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        this.log(`üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Agent2: "${message.data}"`);
    }

    initiateHandshake() {
        if (!this.isClientConnected || !this.clientSocket) {
            this.log('‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Ö—ç–Ω–¥—à–µ–π–∫–∞');
            return;
        }

        this.log('ü§ù –ò–Ω–∏—Ü–∏–∏—Ä—É—é —Ö—ç–Ω–¥—à–µ–π–∫ —Å Agent2');
        
        const handshakeMessage = {
            type: 'handshake_init',
            data: '–ü—Ä–∏–≤–µ—Ç!',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToClient(handshakeMessage);
        this.log(`üì§ [${this.agentId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö—ç–Ω–¥—à–µ–π–∫: "${handshakeMessage.data}"`);
    }

    handleHandshakeResponse(message) {
        this.log('ü§ù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫ –æ—Ç Agent2');
        this.log(`üì• [${this.agentId}] Agent2 –æ—Ç–≤–µ—Ç–∏–ª: "${message.data}"`);
        
        this.handshakeComplete = true;
        this.log('‚úÖ –•—ç–Ω–¥—à–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞—á–∏–Ω–∞—é –ø–∏–Ω–≥-–ø–æ–Ω–≥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–∏–Ω–≥
        this.sendPing();
    }

    sendPing() {
        if (!this.handshakeComplete || !this.isClientConnected || !this.clientSocket) {
            this.log('‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω–≥ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ');
            return;
        }

        this.pingCount++;
        const pingMessage = {
            type: 'ping',
            data: `PING! üèì (#${this.pingCount})`,
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToClient(pingMessage);
        this.log(`üèì [${this.agentId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω PING: "${pingMessage.data}"`);
    }

    handlePong(message) {
        this.pongCount++;
        this.log(`üèì [${this.agentId}] –ü–æ–ª—É—á–µ–Ω PONG –æ—Ç ${message.sender}: "${message.data}" (#${this.pongCount})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            this.sendPing();
        }, 1000);
    }

    sendToClient(message) {
        if (this.clientSocket && this.isClientConnected) {
            this.clientSocket.write(JSON.stringify(message));
        }
    }

    log(message) {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] ${message}`);
    }

    showStatus() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log('=== STATUS REPORT ===');
        this.log(`[${this.agentId}] –°—Ç–∞—Ç—É—Å: ${this.isRunning ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        this.log(`–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime} —Å–µ–∫—É–Ω–¥`);
        this.log(`Session ID: ${this.sessionId}`);
        this.log(`TCP –ø–æ—Ä—Ç: ${this.port}`);
        this.log(`–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${this.isClientConnected}`);
        this.log(`–•—ç–Ω–¥—à–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${this.handshakeComplete}`);
        this.log(`–ü–∏–Ω–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${this.pingCount}`);
        this.log(`–ü–æ–Ω–≥–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${this.pongCount}`);
        this.log('=== END STATUS ===');
    }

    stop() {
        if (!this.isRunning) {
            return;
        }

        this.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä –∞–≥–µ–Ω—Ç–∞...');
        this.isRunning = false;

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        if (this.clientSocket) {
            this.clientSocket.end();
            this.clientSocket = null;
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if (this.server) {
            this.server.close(() => {
                this.log('üîí TCP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
            });
        }

        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—Å`);
        this.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ü–∏–Ω–≥–æ–≤: ${this.pingCount}, –ü–æ–Ω–≥–æ–≤: ${this.pongCount}`);
        
        process.exit(0);
    }

    getMetrics() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        return {
            agentId: this.agentId,
            isRunning: this.isRunning,
            sessionId: this.sessionId,
            uptime: uptime,
            port: this.port,
            clientConnected: this.isClientConnected,
            handshakeComplete: this.handshakeComplete,
            pingCount: this.pingCount,
            pongCount: this.pongCount
        };
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä –∞–≥–µ–Ω—Ç–∞
const serverAgent = new CursorBackgroundAgentServer();

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
serverAgent.start();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = CursorBackgroundAgentServer; 