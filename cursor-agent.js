/**
 * Cursor Background Agent - VLOG Logger
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ Cursor
 */

class CursorBackgroundAgent {
    constructor(interval = 3000) {
        this.interval = interval;
        this.isRunning = false;
        this.intervalId = null;
        this.startTime = new Date();
        this.messageCount = 0;
        this.sessionId = this.generateSessionId();
    }

    generateSessionId() {
        return Math.random().toString(36).substring(2, 15);
    }

    start() {
        if (this.isRunning) {
            this.log('VLOG: Cursor Background Agent —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.isRunning = true;
        this.log('VLOG: üöÄ Cursor Background Agent –∑–∞–ø—É—â–µ–Ω –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ');
        this.log(`VLOG: Session ID: ${this.sessionId}`);
        this.log('VLOG: –ø—Ä–∏–≤–µ—Ç –∏–∑ –±—ç–∫–≥—Ä–∞—É–Ω–¥–∞');

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–µ
        this.logEnvironmentInfo();

        this.intervalId = setInterval(() => {
            this.logMessage();
        }, this.interval);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', () => this.stop());
        process.on('SIGTERM', () => this.stop());
        process.on('SIGUSR1', () => this.showStatus());
        process.on('SIGUSR2', () => this.changeInterval());
    }

    logEnvironmentInfo() {
        this.log(`VLOG: üñ•Ô∏è  Hostname: ${require('os').hostname()}`);
        this.log(`VLOG: üêß Platform: ${process.platform} ${process.arch}`);
        this.log(`VLOG: üìÅ Working Dir: ${process.cwd()}`);
        this.log(`VLOG: üü¢ Node.js: ${process.version}`);
        this.log(`VLOG: üîß PID: ${process.pid}`);
    }

    logMessage() {
        this.messageCount++;
        const currentTime = new Date();
        const uptime = Math.floor((currentTime - this.startTime) / 1000);
        const formattedTime = currentTime.toLocaleTimeString('ru-RU');
        
        this.log(`VLOG: –ø—Ä–∏–≤–µ—Ç –∏–∑ –±—ç–∫–≥—Ä–∞—É–Ω–¥–∞ [${formattedTime}, –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—Å, –°–æ–æ–±—â–µ–Ω–∏–π: ${this.messageCount}]`);
    }

    log(message) {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] ${message}`);
    }

    showStatus() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log('VLOG: === STATUS REPORT ===');
        this.log(`VLOG: –°—Ç–∞—Ç—É—Å: ${this.isRunning ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        this.log(`VLOG: –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime} —Å–µ–∫—É–Ω–¥`);
        this.log(`VLOG: –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${this.interval}–º—Å`);
        this.log(`VLOG: –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${this.messageCount}`);
        this.log(`VLOG: Session ID: ${this.sessionId}`);
        this.log('VLOG: === END STATUS ===');
    }

    changeInterval() {
        const newInterval = this.interval === 3000 ? 1000 : 3000;
        this.log(`VLOG: üîÑ –ò–∑–º–µ–Ω—è—é –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å ${this.interval}–º—Å –Ω–∞ ${newInterval}–º—Å`);
        this.setInterval(newInterval);
    }

    stop() {
        if (!this.isRunning) {
            return;
        }

        this.log('\nVLOG: üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Cursor Background Agent...');
        this.isRunning = false;
        
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }

        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log(`VLOG: ‚úÖ Cursor Background Agent –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—Å, –°–æ–æ–±—â–µ–Ω–∏–π: ${this.messageCount}`);
        process.exit(0);
    }

    setInterval(newInterval) {
        if (newInterval < 500) {
            this.log('VLOG: ‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 500–º—Å');
            return;
        }

        this.interval = newInterval;
        if (this.isRunning) {
            clearInterval(this.intervalId);
            this.intervalId = setInterval(() => {
                this.logMessage();
            }, this.interval);
            this.log(`VLOG: üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${this.interval}–º—Å`);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    getMetrics() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        return {
            isRunning: this.isRunning,
            sessionId: this.sessionId,
            uptime: uptime,
            messageCount: this.messageCount,
            interval: this.interval,
            averageMessagesPerSecond: uptime > 0 ? (this.messageCount / uptime).toFixed(2) : 0
        };
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
const agent = new CursorBackgroundAgent(3000);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const envInterval = process.env.AGENT_INTERVAL;
if (envInterval && !isNaN(envInterval)) {
    agent.setInterval(parseInt(envInterval));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
agent.start();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = CursorBackgroundAgent; 