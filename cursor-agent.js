/**
 * Cursor Background Agent - PingPong System
 * –°–∏—Å—Ç–µ–º–∞ —Å –¥–≤—É–º—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ PingPong –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π
 */

class Agent {
    constructor(id, system) {
        this.id = id;
        this.system = system;
        this.sessionId = this.generateSessionId();
    }

    generateSessionId() {
        return Math.random().toString(36).substring(2, 15);
    }

    log(message) {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] [${this.id}] ${message}`);
    }

    sendMessage(targetAgent, type, data) {
        this.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é ${type}: "${data}" ‚Üí ${targetAgent}`);
        this.system.deliverMessage(this.id, targetAgent, type, data);
    }

    receiveMessage(fromAgent, type, data) {
        this.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ ${type}: "${data}" ‚Üê ${fromAgent}`);
        
        switch (type) {
            case 'handshake_init':
                this.handleHandshake(fromAgent, data);
                break;
            case 'ping':
                this.handlePing(fromAgent, data);
                break;
            case 'pong':
                this.handlePong(fromAgent, data);
                break;
        }
    }

    handleHandshake(fromAgent, data) {
        this.log(`ü§ù –ü–æ–ª—É—á–µ–Ω —Ö—ç–Ω–¥—à–µ–π–∫ –æ—Ç ${fromAgent}: "${data}"`);
        this.sendMessage(fromAgent, 'handshake_response', '–ü—Ä–∏–≤–µ—Ç!');
    }

    handlePing(fromAgent, data) {
        this.log(`üèì –ü–æ–ª—É—á–µ–Ω PING: "${data}"`);
        this.sendMessage(fromAgent, 'pong', 'PONG! üèì');
    }

    handlePong(fromAgent, data) {
        this.log(`üèì –ü–æ–ª—É—á–µ–Ω PONG: "${data}"`);
    }
}

class CursorBackgroundAgent {
    constructor() {
        this.startTime = new Date();
        this.isRunning = false;
        this.agents = {};
        this.pingPongInterval = null;
        this.pingCount = 0;
        this.pongCount = 0;
        
        // –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö –∞–≥–µ–Ω—Ç–æ–≤
        this.agents['Agent1'] = new Agent('Agent1', this);
        this.agents['Agent2'] = new Agent('Agent2', this);
        
        this.currentPingAgent = 'Agent1';
        this.currentPongAgent = 'Agent2';
    }

    start() {
        if (this.isRunning) {
            this.log('üîÑ –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
            return;
        }

        this.isRunning = true;
        this.log('üöÄ –°–∏—Å—Ç–µ–º–∞ PingPong –∑–∞–ø—É—â–µ–Ω–∞');
        this.log(`üîß PID: ${process.pid}`);
        this.log(`üìã Agent1 Session: ${this.agents['Agent1'].sessionId}`);
        this.log(`üìã Agent2 Session: ${this.agents['Agent2'].sessionId}`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ö—ç–Ω–¥—à–µ–π–∫
        this.initiateHandshake();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', () => this.stop());
        process.on('SIGTERM', () => this.stop());
        process.on('SIGUSR1', () => this.showStatus());
    }

    log(message) {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] [SYSTEM] ${message}`);
    }

    deliverMessage(fromAgent, toAgent, type, data) {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            if (this.agents[toAgent]) {
                this.agents[toAgent].receiveMessage(fromAgent, type, data);
                
                // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫, –∑–∞–ø—É—Å–∫–∞–µ–º PingPong
                if (type === 'handshake_response') {
                    this.log('‚úÖ –•—ç–Ω–¥—à–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞–ø—É—Å–∫–∞—é PingPong –∫–æ–º–∞–Ω–¥—É');
                    this.startPingPong();
                }
                
                // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if (type === 'ping') this.pingCount++;
                if (type === 'pong') this.pongCount++;
            }
        }, 10); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 10–º—Å
    }

    initiateHandshake() {
        this.log('ü§ù –ò–Ω–∏—Ü–∏–∏—Ä—É—é —Ö—ç–Ω–¥—à–µ–π–∫ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏');
        this.agents['Agent1'].sendMessage('Agent2', 'handshake_init', '–ü—Ä–∏–≤–µ—Ç!');
    }

    startPingPong() {
        this.log('üèì –ö–æ–º–∞–Ω–¥–∞ PingPong –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 1 —Å–µ–∫—É–Ω–¥–∞)');
        
        this.pingPongInterval = setInterval(() => {
            this.executePingPongCommand();
        }, 1000);
    }

    executePingPongCommand() {
        if (!this.isRunning) return;

        // Agent1 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping Agent2
        const pingData = `PING! üèì (#${this.pingCount + 1})`;
        this.agents[this.currentPingAgent].sendMessage(this.currentPongAgent, 'ping', pingData);
    }

    showStatus() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log('=== STATUS REPORT ===');
        this.log(`–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ${this.isRunning ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
        this.log(`–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime} —Å–µ–∫—É–Ω–¥`);
        this.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤: ${Object.keys(this.agents).length}`);
        this.log(`–ü–∏–Ω–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${this.pingCount}`);
        this.log(`–ü–æ–Ω–≥–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${this.pongCount}`);
        this.log(`Agent1 Session: ${this.agents['Agent1'].sessionId}`);
        this.log(`Agent2 Session: ${this.agents['Agent2'].sessionId}`);
        this.log('=== END STATUS ===');
    }

    stop() {
        if (!this.isRunning) {
            return;
        }

        this.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã PingPong...');
        this.isRunning = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PingPong
        if (this.pingPongInterval) {
            clearInterval(this.pingPongInterval);
            this.pingPongInterval = null;
        }

        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ PingPong –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—Å`);
        this.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ü–∏–Ω–≥–æ–≤: ${this.pingCount}, –ü–æ–Ω–≥–æ–≤: ${this.pongCount}`);
        
        process.exit(0);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    getMetrics() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        return {
            isRunning: this.isRunning,
            uptime: uptime,
            agentCount: Object.keys(this.agents).length,
            pingCount: this.pingCount,
            pongCount: this.pongCount,
            agents: Object.keys(this.agents).map(id => ({
                id: id,
                sessionId: this.agents[id].sessionId
            }))
        };
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
const system = new CursorBackgroundAgent();

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
system.start();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = CursorBackgroundAgent; 