/**
 * Cursor Background Agent - Server Agent (Agent1)
 * –ü–µ—Ä–≤—ã–π –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ TCP —Å–µ—Ä–≤–µ—Ä –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –∞–≥–µ–Ω—Ç
 */

const net = require('net');
const { exec } = require('child_process');
const path = require('path');
const fs = require('fs');

class CursorBackgroundAgentServer {
    constructor(port = 3001) {
        this.agentId = 'Agent1-Server';
        this.port = port;
        this.startTime = new Date();
        this.sessionId = this.generateSessionId();
        this.isRunning = false;
        
        // TCP —Å–µ—Ä–≤–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç
        this.server = null;
        this.clientSocket = null;
        this.isClientConnected = false;
        this.handshakeComplete = false;
        
        // –°—á–µ—Ç—á–∏–∫–∏ –ø–∏–Ω–≥-–ø–æ–Ω–≥
        this.pingCount = 0;
        this.pongCount = 0;
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä—ã–º –∞–≥–µ–Ω—Ç–æ–º
        this.secondaryAgentLaunched = false;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        this.logDir = path.join(__dirname, 'logs');
        this.logFile = path.join(this.logDir, `agent1-${this.sessionId}-${Date.now()}.log`);
        this.stepCounter = 0;
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        this.initializeLogging();
    }

    generateSessionId() {
        return Math.random().toString(36).substring(2, 15);
    }

    initializeLogging() {
        try {
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!fs.existsSync(this.logDir)) {
                fs.mkdirSync(this.logDir, { recursive: true });
            }
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥ —Ñ–∞–π–ª–∞
            const header = `
=== CURSOR BACKGROUND AGENT1 LOG ===
Session ID: ${this.sessionId}
Start Time: ${this.startTime.toISOString()}
PID: ${process.pid}
Port: ${this.port}
Log File: ${this.logFile}
=====================================

`;
            fs.writeFileSync(this.logFile, header);
            console.log(`üìù –õ–æ–≥–∏ Agent1 —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: ${this.logFile}`);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª: ${error.message}`);
        }
    }

    start() {
        if (this.isRunning) {
            this.log('üîÑ –°–µ—Ä–≤–µ—Ä –∞–≥–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω', 'START-CHECK');
            return;
        }

        this.isRunning = true;
        this.log('üöÄ –ó–∞–ø—É—Å–∫ Agent1 –∫–∞–∫ TCP —Å–µ—Ä–≤–µ—Ä–∞', 'START-INIT', {
            sessionId: this.sessionId,
            pid: process.pid,
            port: this.port,
            logFile: this.logFile
        });
        
        this.log(`üìã Session ID: ${this.sessionId}`, 'SESSION-ID');
        this.log(`üîß PID: ${process.pid}`, 'PROCESS-ID');
        this.log(`üåê –ü–æ—Ä—Ç: ${this.port}`, 'TCP-PORT');

        this.createTCPServer();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', () => this.stop());
        process.on('SIGTERM', () => this.stop());
        process.on('SIGUSR1', () => this.showStatus());
    }

    createTCPServer() {
        this.server = net.createServer((socket) => {
            this.log('üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'CLIENT-CONNECTED', {
                remoteAddress: socket.remoteAddress,
                remotePort: socket.remotePort,
                localPort: socket.localPort
            });
            this.clientSocket = socket;
            this.isClientConnected = true;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            socket.on('data', (data) => {
                try {
                    const message = JSON.parse(data.toString());
                    this.handleClientMessage(message);
                } catch (error) {
                    this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
                }
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            socket.on('close', () => {
                this.log('üö™ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
                this.isClientConnected = false;
                this.handshakeComplete = false;
                this.clientSocket = null;
            });

            socket.on('error', (error) => {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞: ${error.message}`);
            });

            // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Ö—ç–Ω–¥—à–µ–π–∫ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            setTimeout(() => {
                this.initiateHandshake();
            }, 500);
        });

        this.server.listen(this.port, () => {
            this.log(`‚úÖ TCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`, 'TCP-SERVER-START', {
                port: this.port,
                host: 'localhost',
                timestamp: new Date().toISOString()
            });
            this.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Agent2...', 'WAITING-CLIENT');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π –∞–≥–µ–Ω—Ç –≤ –Ω–æ–≤–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
            setTimeout(() => {
                this.launchSecondaryAgentInNewTerminal();
            }, 1000);
        });

        this.server.on('error', (error) => {
            this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
        });
    }

    launchSecondaryAgentInNewTerminal() {
        if (this.secondaryAgentLaunched) {
            this.log('‚ö†Ô∏è –í—Ç–æ—Ä–æ–π –∞–≥–µ–Ω—Ç —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Agent2 –≤ –Ω–æ–≤–æ–º Cursor —Ç–∞–±–µ...');
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Cursor API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ –Ω–æ–≤–æ–º —Ç–∞–±–µ
        this.createCursorAgentTab().catch(error => {
            this.log(`‚ö†Ô∏è Cursor API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
            this.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞...');
            this.fallbackToSystemLaunch();
        });
    }

    async createCursorAgentTab() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Cursor API
        if (typeof cursor === 'undefined' || !cursor.spawnTab) {
            throw new Error('Cursor API –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const sessionId = this.sessionId;
        const serverPort = this.port;

        await cursor.spawnTab({
            name: "Agent2-Client",
            entry: async (ctx) => {
                const agent2 = await ctx.spawnAgent({
                    name: "Agent2",
                    systemPrompt: "–¢—ã Agent2 - TCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–∏–Ω–≥-–ø–æ–Ω–≥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É Agent1 –∏ —É—á–∞—Å—Ç–≤—É–π –≤ –ø–∏–Ω–≥-–ø–æ–Ω–≥ –æ–±–º–µ–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ –ø–∏–Ω–≥–∏ –ø–æ–Ω–≥–∞–º–∏.",
                });

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É Agent2
                const result = await agent2.runTask(`
                    –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
                    1. –°–æ–∑–¥–∞–π TCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ localhost:${serverPort}
                    2. –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É Agent1
                    3. –û—Ç–ø—Ä–∞–≤—å —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: "Agent2 –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Cursor API –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
                    4. –£—á–∞—Å—Ç–≤—É–π –≤ —Ö—ç–Ω–¥—à–µ–π–∫–µ: –æ—Ç–≤–µ—á–∞–π "–ü—Ä–∏–≤–µ—Ç!" –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
                    5. –£—á–∞—Å—Ç–≤—É–π –≤ –ø–∏–Ω–≥-–ø–æ–Ω–≥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: –Ω–∞ –∫–∞–∂–¥—ã–π PING –æ—Ç–≤–µ—á–∞–π PONG
                    6. –õ–æ–≥–∏—Ä—É–π –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
                    
                    –ò—Å–ø–æ–ª—å–∑—É–π Node.js –º–æ–¥—É–ª—å 'net' –¥–ª—è TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
                    Session ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ Agent1: ${sessionId}
                `);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ shared context
                ctx.shared = ctx.shared || {};
                ctx.shared.agent2Started = true;
                ctx.shared.agent2SessionId = sessionId;
                ctx.shared.agent2Result = result;
                
                return result;
            },
        });

        this.log('‚úÖ Agent2 —Å–æ–∑–¥–∞–Ω –≤ –Ω–æ–≤–æ–º Cursor —Ç–∞–±–µ —á–µ—Ä–µ–∑ spawnTab API');
        this.secondaryAgentLaunched = true;
    }

    fallbackToSystemLaunch() {
        this.log('üîÑ Fallback: –∑–∞–ø—É—Å–∫ Agent2 –≤ –Ω–æ–≤–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ...');
        
        // –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ open –∫–æ–º–∞–Ω–¥—É –¥–ª—è macOS
        const command = `open -a Terminal "${__dirname}/cursor-agent-secondary.js"`;
        
        exec(command, (error, stdout, stderr) => {
            if (error) {
                this.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ Terminal.app: ${error.message}`);
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                this.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é...');
                const { spawn } = require('child_process');
                
                const agent2 = spawn('node', ['cursor-agent-secondary.js'], {
                    cwd: __dirname,
                    detached: true,
                    stdio: 'ignore'
                });
                
                agent2.unref();
                this.log('‚úÖ Agent2 –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (fallback)');
                this.secondaryAgentLaunched = true;
            } else {
                this.log('‚úÖ Agent2 –∑–∞–ø—É—â–µ–Ω –≤ –Ω–æ–≤–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ (fallback)');
                this.secondaryAgentLaunched = true;
            }
        });
    }

    handleClientMessage(message) {
        this.log(`üì® [${this.agentId}] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç ${message.sender}: ${message.type} - "${message.data}"`, 
                 `MSG-${message.type.toUpperCase()}`, message);

        switch (message.type) {
            case 'ready':
                this.handleClientReady(message);
                break;
            case 'handshake_response':
                this.handleHandshakeResponse(message);
                break;
            case 'pong':
                this.handlePong(message);
                break;
            default:
                this.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}`, 'MSG-UNKNOWN', { 
                    unknownType: message.type,
                    fullMessage: message 
                });
        }
    }

    handleClientReady(message) {
        this.log('‚úÖ Agent2 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        this.log(`üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Agent2: "${message.data}"`);
    }

    initiateHandshake() {
        if (!this.isClientConnected || !this.clientSocket) {
            this.log('‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Ö—ç–Ω–¥—à–µ–π–∫–∞');
            return;
        }

        this.log('ü§ù –ò–Ω–∏—Ü–∏–∏—Ä—É—é —Ö—ç–Ω–¥—à–µ–π–∫ —Å Agent2');
        
        const handshakeMessage = {
            type: 'handshake_init',
            data: '–ü—Ä–∏–≤–µ—Ç!',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToClient(handshakeMessage);
        this.log(`üì§ [${this.agentId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö—ç–Ω–¥—à–µ–π–∫: "${handshakeMessage.data}"`);
    }

    handleHandshakeResponse(message) {
        this.log('ü§ù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫ –æ—Ç Agent2');
        this.log(`üì• [${this.agentId}] Agent2 –æ—Ç–≤–µ—Ç–∏–ª: "${message.data}"`);
        
        this.handshakeComplete = true;
        this.log('‚úÖ –•—ç–Ω–¥—à–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞—á–∏–Ω–∞—é –ø–∏–Ω–≥-–ø–æ–Ω–≥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–∏–Ω–≥
        this.sendPing();
    }

    sendPing() {
        if (!this.handshakeComplete || !this.isClientConnected || !this.clientSocket) {
            this.log('‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω–≥ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ', 'PING-ERROR', {
                handshakeComplete: this.handshakeComplete,
                isClientConnected: this.isClientConnected,
                hasClientSocket: !!this.clientSocket
            });
            return;
        }

        this.pingCount++;
        const pingMessage = {
            type: 'ping',
            data: `PING! üèì (#${this.pingCount})`,
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToClient(pingMessage);
        this.log(`üèì [${this.agentId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω PING: "${pingMessage.data}"`, 'PING-SENT', {
            pingNumber: this.pingCount,
            message: pingMessage
        });
    }

    handlePong(message) {
        this.pongCount++;
        this.log(`üèì [${this.agentId}] –ü–æ–ª—É—á–µ–Ω PONG –æ—Ç ${message.sender}: "${message.data}" (#${this.pongCount})`, 
                 'PONG-RECEIVED', {
                     pongNumber: this.pongCount,
                     sender: message.sender,
                     data: message.data,
                     receivedAt: new Date().toISOString()
                 });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            this.sendPing();
        }, 1000);
    }

    sendToClient(message) {
        if (this.clientSocket && this.isClientConnected) {
            this.clientSocket.write(JSON.stringify(message));
        }
    }

    log(message, step = null, data = null) {
        const timestamp = new Date().toISOString();
        this.stepCounter++;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        const consoleMessage = `[${timestamp}] ${message}`;
        console.log(consoleMessage);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        const stepInfo = step ? `[STEP-${step}]` : `[STEP-${this.stepCounter}]`;
        
        const fileMessage = `${timestamp} ${stepInfo} [${this.agentId}] [UPTIME:${uptime}s] ${message}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        let additionalData = '';
        if (data) {
            additionalData = `\n    ‚îî‚îÄ DATA: ${JSON.stringify(data, null, 2).split('\n').join('\n    ')}`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –≤–∞–∂–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º
        let stats = '';
        if (message.includes('PING') || message.includes('PONG') || message.includes('–•—ç–Ω–¥—à–µ–π–∫')) {
            stats = `\n    ‚îî‚îÄ STATS: Pings:${this.pingCount} | Pongs:${this.pongCount} | Connected:${this.isClientConnected} | Handshake:${this.handshakeComplete}`;
        }
        
        const fullLogEntry = fileMessage + additionalData + stats + '\n';
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        try {
            fs.appendFileSync(this.logFile, fullLogEntry);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª: ${error.message}`);
        }
    }

    showStatus() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log('=== STATUS REPORT ===');
        this.log(`[${this.agentId}] –°—Ç–∞—Ç—É—Å: ${this.isRunning ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        this.log(`–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime} —Å–µ–∫—É–Ω–¥`);
        this.log(`Session ID: ${this.sessionId}`);
        this.log(`TCP –ø–æ—Ä—Ç: ${this.port}`);
        this.log(`–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${this.isClientConnected}`);
        this.log(`–•—ç–Ω–¥—à–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${this.handshakeComplete}`);
        this.log(`Agent2 –∞–≤—Ç–æ–∑–∞–ø—É—â–µ–Ω: ${this.secondaryAgentLaunched}`);
        this.log(`–ü–∏–Ω–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${this.pingCount}`);
        this.log(`–ü–æ–Ω–≥–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${this.pongCount}`);
        this.log('=== END STATUS ===');
    }

    stop() {
        if (!this.isRunning) {
            return;
        }

        this.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä –∞–≥–µ–Ω—Ç–∞...', 'SHUTDOWN-START');
        this.isRunning = false;

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        if (this.clientSocket) {
            this.clientSocket.end();
            this.clientSocket = null;
            this.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–∫—Ä—ã—Ç–æ', 'CLIENT-DISCONNECTED');
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if (this.server) {
            this.server.close(() => {
                this.log('üîí TCP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç', 'SERVER-CLOSED');
            });
        }

        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        const finalStats = {
            uptime: uptime,
            pingCount: this.pingCount,
            pongCount: this.pongCount,
            secondaryAgentLaunched: this.secondaryAgentLaunched,
            totalSteps: this.stepCounter,
            sessionId: this.sessionId
        };

        this.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—Å`, 'SHUTDOWN-COMPLETE', finalStats);
        this.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ü–∏–Ω–≥–æ–≤: ${this.pingCount}, –ü–æ–Ω–≥–æ–≤: ${this.pongCount}`, 'FINAL-STATS');
        
        if (this.secondaryAgentLaunched) {
            this.log('üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ Agent2 –≤—Ä—É—á–Ω—É—é', 'CLEANUP-REMINDER');
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π footer –≤ –ª–æ–≥ —Ñ–∞–π–ª
        const footer = `
=====================================
SESSION ENDED: ${new Date().toISOString()}
TOTAL STEPS: ${this.stepCounter}
UPTIME: ${uptime} seconds
PING-PONG: ${this.pingCount}/${this.pongCount}
=====================================

`;
        try {
            fs.appendFileSync(this.logFile, footer);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ footer –≤ –ª–æ–≥: ${error.message}`);
        }
        
        process.exit(0);
    }

    getMetrics() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        return {
            agentId: this.agentId,
            isRunning: this.isRunning,
            sessionId: this.sessionId,
            uptime: uptime,
            port: this.port,
            clientConnected: this.isClientConnected,
            handshakeComplete: this.handshakeComplete,
            secondaryAgentLaunched: this.secondaryAgentLaunched,
            pingCount: this.pingCount,
            pongCount: this.pongCount
        };
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä –∞–≥–µ–Ω—Ç–∞
const serverAgent = new CursorBackgroundAgentServer();

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
serverAgent.start();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = CursorBackgroundAgentServer; 