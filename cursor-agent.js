/**
 * Cursor Background Agent - Ping-Pong Communication
 * –°–∏—Å—Ç–µ–º–∞ –¥–≤—É—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–∏–Ω–≥-–ø–æ–Ω–≥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π
 */

const { fork } = require('child_process');
const path = require('path');

class CursorBackgroundAgent {
    constructor() {
        this.startTime = new Date();
        this.sessionId = this.generateSessionId();
        this.agentId = 'Agent1';
        this.isRunning = false;
        
        // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ç–æ—Ä–∏—á–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
        this.secondaryAgent = null;
        this.secondaryAgentReady = false;
        this.handshakeComplete = false;
        this.pingPongInterval = null;
        this.pingCount = 0;
        this.pongCount = 0;
    }

    generateSessionId() {
        return Math.random().toString(36).substring(2, 15);
    }

    start() {
        if (this.isRunning) {
            this.log('üîÑ –ê–≥–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.isRunning = true;
        this.log('üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç (Agent1) –∑–∞–ø—É—â–µ–Ω');
        this.log(`üìã Session ID: ${this.sessionId}`);
        this.log(`üîß PID: ${process.pid}`);

        // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç
        this.createSecondaryAgent();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', () => this.stop());
        process.on('SIGTERM', () => this.stop());
        process.on('SIGUSR1', () => this.showStatus());
    }

    createSecondaryAgent() {
        this.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...');
        
        const secondaryAgentPath = path.join(__dirname, 'cursor-agent-secondary.js');
        
        try {
            this.secondaryAgent = fork(secondaryAgentPath, [], {
                stdio: ['pipe', 'pipe', 'pipe', 'ipc']
            });

            this.log(`‚úÖ –í—Ç–æ—Ä–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å PID: ${this.secondaryAgent.pid}`);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            this.secondaryAgent.on('message', (message) => {
                this.handleSecondaryAgentMessage(message);
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            this.secondaryAgent.on('error', (error) => {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: ${error.message}`);
            });

            this.secondaryAgent.on('exit', (code, signal) => {
                this.log(`üö™ –í—Ç–æ—Ä–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (code: ${code}, signal: ${signal})`);
                this.secondaryAgentReady = false;
                this.handshakeComplete = false;
                if (this.pingPongInterval) {
                    clearInterval(this.pingPongInterval);
                    this.pingPongInterval = null;
                }
            });

        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: ${error.message}`);
        }
    }

    handleSecondaryAgentMessage(message) {
        this.log(`üì® [${this.agentId}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.sender}: ${message.type} - "${message.data}"`);

        switch (message.type) {
            case 'ready':
                this.handleSecondaryAgentReady(message);
                break;
            case 'handshake_response':
                this.handleHandshakeResponse(message);
                break;
            case 'pong':
                this.handlePong(message);
                break;
            default:
                this.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: ${message.type}`);
        }
    }

    handleSecondaryAgentReady(message) {
        this.log('‚úÖ –í—Ç–æ—Ä–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        this.secondaryAgentReady = true;
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Ö—ç–Ω–¥—à–µ–π–∫
        setTimeout(() => {
            this.initiateHandshake();
        }, 500);
    }

    initiateHandshake() {
        if (!this.secondaryAgentReady) {
            this.log('‚ö†Ô∏è –í—Ç–æ—Ä–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Ö—ç–Ω–¥—à–µ–π–∫–∞');
            return;
        }

        this.log('ü§ù –ò–Ω–∏—Ü–∏–∏—Ä—É—é —Ö—ç–Ω–¥—à–µ–π–∫ —Å –≤—Ç–æ—Ä–∏—á–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º');
        
        const handshakeMessage = {
            type: 'handshake_init',
            data: '–ü—Ä–∏–≤–µ—Ç!',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.secondaryAgent.send(handshakeMessage);
        this.log(`üì§ [${this.agentId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö—ç–Ω–¥—à–µ–π–∫: "${handshakeMessage.data}"`);
    }

    handleHandshakeResponse(message) {
        this.log('ü§ù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫ –æ—Ç –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞');
        this.log(`üì• [${this.agentId}] –í—Ç–æ—Ä–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª: "${message.data}"`);
        
        this.handshakeComplete = true;
        this.log('‚úÖ –•—ç–Ω–¥—à–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞—á–∏–Ω–∞—é –ø–∏–Ω–≥-–ø–æ–Ω–≥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é');
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–∏–Ω–≥-–ø–æ–Ω–≥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        this.startPingPong();
    }

    startPingPong() {
        if (this.pingPongInterval) {
            clearInterval(this.pingPongInterval);
        }

        this.pingPongInterval = setInterval(() => {
            this.sendPing();
        }, 1000); // –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

        this.log('üèì –ü–∏–Ω–≥-–ø–æ–Ω–≥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 1 —Å–µ–∫—É–Ω–¥–∞)');
    }

    sendPing() {
        if (!this.handshakeComplete || !this.secondaryAgent) {
            return;
        }

        this.pingCount++;
        const pingMessage = {
            type: 'ping',
            data: `PING! üèì (#${this.pingCount})`,
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.secondaryAgent.send(pingMessage);
        this.log(`üèì [${this.agentId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω PING: "${pingMessage.data}"`);
    }

    handlePong(message) {
        this.pongCount++;
        this.log(`üèì [${this.agentId}] –ü–æ–ª—É—á–µ–Ω PONG –æ—Ç ${message.sender}: "${message.data}" (#${this.pongCount})`);
    }

    log(message) {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] ${message}`);
    }

    showStatus() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log('=== STATUS REPORT ===');
        this.log(`[${this.agentId}] –°—Ç–∞—Ç—É—Å: ${this.isRunning ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        this.log(`–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime} —Å–µ–∫—É–Ω–¥`);
        this.log(`Session ID: ${this.sessionId}`);
        this.log(`–í—Ç–æ—Ä–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤: ${this.secondaryAgentReady}`);
        this.log(`–•—ç–Ω–¥—à–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${this.handshakeComplete}`);
        this.log(`–ü–∏–Ω–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${this.pingCount}`);
        this.log(`–ü–æ–Ω–≥–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${this.pongCount}`);
        this.log('=== END STATUS ===');
    }

    stop() {
        if (!this.isRunning) {
            return;
        }

        this.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤...');
        this.isRunning = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–Ω–≥-–ø–æ–Ω–≥
        if (this.pingPongInterval) {
            clearInterval(this.pingPongInterval);
            this.pingPongInterval = null;
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Ç–æ—Ä–∏—á–Ω—ã–π –∞–≥–µ–Ω—Ç
        if (this.secondaryAgent) {
            this.log('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...');
            this.secondaryAgent.kill('SIGTERM');
            this.secondaryAgent = null;
        }

        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—Å`);
        this.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏–Ω–≥-–ø–æ–Ω–≥: –ü–∏–Ω–≥–æ–≤: ${this.pingCount}, –ü–æ–Ω–≥–æ–≤: ${this.pongCount}`);
        
        process.exit(0);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    getMetrics() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        return {
            agentId: this.agentId,
            isRunning: this.isRunning,
            sessionId: this.sessionId,
            uptime: uptime,
            secondaryAgent: {
                ready: this.secondaryAgentReady,
                handshakeComplete: this.handshakeComplete,
                pingCount: this.pingCount,
                pongCount: this.pongCount
            }
        };
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
const agent = new CursorBackgroundAgent();

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
agent.start();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = CursorBackgroundAgent; 