/**
 * Cursor Background Agent - Client Agent (Agent2)
 * –í—Ç–æ—Ä–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ TCP –∫–ª–∏–µ–Ω—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –∞–≥–µ–Ω—Ç—É
 */

const net = require('net');
const fs = require('fs');
const path = require('path');

class CursorBackgroundAgentClient {
    constructor(host = 'localhost', port = 3001) {
        this.agentId = 'Agent2-Client';
        this.host = host;
        this.port = port;
        this.startTime = new Date();
        this.sessionId = this.generateSessionId();
        this.isRunning = false;
        
        // TCP –∫–ª–∏–µ–Ω—Ç
        this.client = null;
        this.isConnected = false;
        this.handshakeComplete = false;
        this.messageCount = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 10;
        this.reconnectInterval = 2000;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        this.logDir = path.join(__dirname, 'logs');
        this.logFile = path.join(this.logDir, `agent2-${this.sessionId}-${Date.now()}.log`);
        this.stepCounter = 0;
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        this.initializeLogging();
    }

    generateSessionId() {
        return Math.random().toString(36).substring(2, 15);
    }

    initializeLogging() {
        try {
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!fs.existsSync(this.logDir)) {
                fs.mkdirSync(this.logDir, { recursive: true });
            }
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥ —Ñ–∞–π–ª–∞
            const header = `
=== CURSOR BACKGROUND AGENT2 LOG ===
Session ID: ${this.sessionId}
Start Time: ${this.startTime.toISOString()}
PID: ${process.pid}
Target: ${this.host}:${this.port}
Log File: ${this.logFile}
=====================================

`;
            fs.writeFileSync(this.logFile, header);
            console.log(`üìù –õ–æ–≥–∏ Agent2 —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: ${this.logFile}`);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª Agent2: ${error.message}`);
        }
    }

    start() {
        if (this.isRunning) {
            this.log('üîÑ –ö–ª–∏–µ–Ω—Ç –∞–≥–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.isRunning = true;
        this.log('üîµ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        this.log('üîµ   Agent2 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω –æ—Ç Agent1');
        this.log('üîµ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        this.log('üöÄ –ó–∞–ø—É—Å–∫ Agent2 –∫–∞–∫ TCP –∫–ª–∏–µ–Ω—Ç–∞');
        this.log(`üìã Session ID: ${this.sessionId}`);
        this.log(`üîß PID: ${process.pid}`);
        this.log(`üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${this.host}:${this.port}`);

        this.connectToServer();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', () => this.stop());
        process.on('SIGTERM', () => this.stop());
    }

    connectToServer() {
        this.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É ${this.host}:${this.port}...`);
        
        this.client = new net.Socket();

        this.client.connect(this.port, this.host, () => {
            this.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
            this.isConnected = true;
            this.reconnectAttempts = 0;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.sendReady();
        });

        this.client.on('data', (data) => {
            try {
                const message = JSON.parse(data.toString());
                this.handleServerMessage(message);
            } catch (error) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            }
        });

        this.client.on('close', () => {
            this.log('üö™ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ');
            this.isConnected = false;
            this.handshakeComplete = false;
            this.scheduleReconnect();
        });

        this.client.on('error', (error) => {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
            this.isConnected = false;
            this.scheduleReconnect();
        });
    }

    scheduleReconnect() {
        if (!this.isRunning) return;
        
        this.reconnectAttempts++;
        if (this.reconnectAttempts > this.maxReconnectAttempts) {
            this.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${this.maxReconnectAttempts})`);
            this.stop();
            return;
        }

        this.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #${this.reconnectAttempts} —á–µ—Ä–µ–∑ ${this.reconnectInterval/1000}—Å...`);
        setTimeout(() => {
            if (this.isRunning) {
                this.connectToServer();
            }
        }, this.reconnectInterval);
    }

    sendReady() {
        const message = {
            type: 'ready',
            data: 'Agent2 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToServer(message);
        this.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä—É');
    }

    handleServerMessage(message) {
        this.messageCount++;
        this.log(`üì® [${this.agentId}] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç ${message.sender}: ${message.type} - "${message.data}"`);

        switch (message.type) {
            case 'handshake_init':
                this.handleHandshakeInit(message);
                break;
            case 'ping':
                this.handlePing(message);
                break;
            default:
                this.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}`);
        }
    }

    handleHandshakeInit(message) {
        this.log('ü§ù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        this.log(`üì• ${message.sender} —Å–∫–∞–∑–∞–ª: "${message.data}"`);

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫
        const response = {
            type: 'handshake_response',
            data: '–ü—Ä–∏–≤–µ—Ç!',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToServer(response);
        this.handshakeComplete = true;
        this.log('üì§ –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫: "–ü—Ä–∏–≤–µ—Ç!"');
        this.log('‚úÖ –•—ç–Ω–¥—à–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –≥–æ—Ç–æ–≤ –∫ –ø–∏–Ω–≥-–ø–æ–Ω–≥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏');
    }

    handlePing(message) {
        if (!this.handshakeComplete) {
            this.log('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø–∏–Ω–≥ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö—ç–Ω–¥—à–µ–π–∫–∞');
            return;
        }

        this.log(`üèì [${this.agentId}] –ü–æ–ª—É—á–µ–Ω PING: "${message.data}"`);

        // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–Ω–≥–æ–º
        const pongResponse = {
            type: 'pong',
            data: 'PONG! üèì',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToServer(pongResponse);
        this.log(`üèì [${this.agentId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω PONG: "${pongResponse.data}"`);
    }

    sendToServer(message) {
        if (this.client && this.isConnected) {
            this.client.write(JSON.stringify(message));
        } else {
            this.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    }

    log(message, step = null, data = null) {
        const timestamp = new Date().toISOString();
        this.stepCounter++;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        const consoleMessage = `[${timestamp}] ${message}`;
        console.log(consoleMessage);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        const stepInfo = step ? `[STEP-${step}]` : `[STEP-${this.stepCounter}]`;
        
        const fileMessage = `${timestamp} ${stepInfo} [${this.agentId}] [UPTIME:${uptime}s] ${message}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        let additionalData = '';
        if (data) {
            additionalData = `\n    ‚îî‚îÄ DATA: ${JSON.stringify(data, null, 2).split('\n').join('\n    ')}`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –≤–∞–∂–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º
        let stats = '';
        if (message.includes('PING') || message.includes('PONG') || message.includes('–ø–æ–¥–∫–ª—é—á') || message.includes('—Ö—ç–Ω–¥—à–µ–π–∫')) {
            stats = `\n    ‚îî‚îÄ STATS: Connected:${this.isConnected} | Handshake:${this.handshakeComplete} | Messages:${this.messageCount} | Reconnects:${this.reconnectAttempts}`;
        }
        
        const fullLogEntry = fileMessage + additionalData + stats + '\n';
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        try {
            fs.appendFileSync(this.logFile, fullLogEntry);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª Agent2: ${error.message}`);
        }
    }

    showStatus() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log('=== CLIENT STATUS REPORT ===');
        this.log(`[${this.agentId}] –°—Ç–∞—Ç—É—Å: ${this.isRunning ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        this.log(`–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime} —Å–µ–∫—É–Ω–¥`);
        this.log(`Session ID: ${this.sessionId}`);
        this.log(`–°–µ—Ä–≤–µ—Ä: ${this.host}:${this.port}`);
        this.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É: ${this.isConnected}`);
        this.log(`–•—ç–Ω–¥—à–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${this.handshakeComplete}`);
        this.log(`–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: ${this.messageCount}`);
        this.log(`–ü–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${this.reconnectAttempts}`);
        this.log('=== END CLIENT STATUS ===');
    }

    stop() {
        if (!this.isRunning) {
            return;
        }

        this.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞...');
        this.isRunning = false;

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (this.client) {
            this.client.destroy();
            this.client = null;
        }

        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—Å`);
        this.log(`üìä –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.messageCount}`);
        
        process.exit(0);
    }

    getMetrics() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        return {
            agentId: this.agentId,
            isRunning: this.isRunning,
            sessionId: this.sessionId,
            uptime: uptime,
            host: this.host,
            port: this.port,
            isConnected: this.isConnected,
            handshakeComplete: this.handshakeComplete,
            messageCount: this.messageCount,
            reconnectAttempts: this.reconnectAttempts
        };
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞
const clientAgent = new CursorBackgroundAgentClient();

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
clientAgent.start();

module.exports = CursorBackgroundAgentClient; 