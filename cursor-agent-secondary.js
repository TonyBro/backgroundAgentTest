/**
 * Cursor AI Background Agent - Enhanced Agent2
 * AI –∞–≥–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Initial Prompt, –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —Ñ–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
 */

const net = require('net');
const fs = require('fs');
const path = require('path');
const WebSocket = require('ws');
const express = require('express');
const chokidar = require('chokidar');
const { v4: uuidv4 } = require('uuid');

class CursorAIBackgroundAgent {
    constructor(host = 'localhost', port = 3001) {
        this.agentId = 'AI-Agent2';
        this.host = host;
        this.port = port;
        this.startTime = new Date();
        this.sessionId = this.generateSessionId();
        this.isRunning = false;
        
        // TCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Agent1
        this.client = null;
        this.isConnected = false;
        this.handshakeComplete = false;
        this.messageCount = 0;
        this.pingCount = 0; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 10;
        this.reconnectInterval = 2000;
        
        // AI Task Manager
        this.aiTaskManager = new AITaskManager();
        this.externalInterfaceManager = new ExternalInterfaceManager(this);
        this.taskPhaseProcessor = new TaskPhaseProcessor(this);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        this.logDir = path.join(__dirname, 'logs');
        this.instructionsDir = path.join(__dirname, 'instructions');
        this.resultsDir = path.join(__dirname, 'results');
        this.logFile = path.join(this.logDir, `ai-agent2-${this.sessionId}-${Date.now()}.log`);
        this.stepCounter = 0;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        this.agentStatus = 'starting';
        this.currentPhase = 'initial';
        this.tasksCompleted = 0;
        this.lastInstruction = null;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        this.initializeDirectories();
    }

    generateSessionId() {
        return Math.random().toString(36).substring(2, 15);
    }

    initializeDirectories() {
        try {
            // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            const dirs = [this.logDir, this.instructionsDir, this.resultsDir];
            dirs.forEach(dir => {
                if (!fs.existsSync(dir)) {
                    fs.mkdirSync(dir, { recursive: true });
                }
            });
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥ —Ñ–∞–π–ª–∞
            const header = `
=== CURSOR AI BACKGROUND AGENT LOG ===
Session ID: ${this.sessionId}
Start Time: ${this.startTime.toISOString()}
PID: ${process.pid}
Target Agent1: ${this.host}:${this.port}
Log File: ${this.logFile}
Instructions Dir: ${this.instructionsDir}
Results Dir: ${this.resultsDir}
==========================================

`;
            fs.writeFileSync(this.logFile, header);
            console.log(`üìù AI Agent2 –ª–æ–≥–∏: ${this.logFile}`);
            console.log(`üìÅ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${this.instructionsDir}`);
            console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${this.resultsDir}`);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error.message}`);
        }
    }

    async start() {
        if (this.isRunning) {
            this.log('üîÑ AI –∞–≥–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.isRunning = true;
        this.agentStatus = 'initializing';
        
        this.log('ü§ñ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        this.log('ü§ñ      AI BACKGROUND AGENT STARTING');
        this.log('ü§ñ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        this.log('üöÄ –ó–∞–ø—É—Å–∫ AI Background Agent —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏');
        this.log(`üìã Session ID: ${this.sessionId}`);
        this.log(`üîß PID: ${process.pid}`);
        this.log(`üåê Agent1 —Å–µ—Ä–≤–µ—Ä: ${this.host}:${this.port}`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        await this.externalInterfaceManager.startAll();
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Agent1
        this.connectToServer();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', () => this.stop());
        process.on('SIGTERM', () => this.stop());
    }

    connectToServer() {
        this.log(`üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Agent1 ${this.host}:${this.port}...`);
        
        this.client = new net.Socket();

        this.client.connect(this.port, this.host, () => {
            this.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Agent1');
            this.isConnected = true;
            this.reconnectAttempts = 0;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.sendReady();
        });

        this.client.on('data', (data) => {
            try {
                const message = JSON.parse(data.toString());
                this.handleServerMessage(message);
            } catch (error) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Agent1: ${error.message}`);
            }
        });

        this.client.on('close', () => {
            this.log('üö™ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Agent1 –∑–∞–∫—Ä—ã—Ç–æ');
            this.isConnected = false;
            this.handshakeComplete = false;
            this.scheduleReconnect();
        });

        this.client.on('error', (error) => {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Agent1: ${error.message}`);
            this.isConnected = false;
            this.scheduleReconnect();
        });
    }

    scheduleReconnect() {
        if (!this.isRunning) return;
        
        this.reconnectAttempts++;
        if (this.reconnectAttempts > this.maxReconnectAttempts) {
            this.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Agent1 (${this.maxReconnectAttempts})`);
            return; // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
        }

        this.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Agent1 #${this.reconnectAttempts} —á–µ—Ä–µ–∑ ${this.reconnectInterval/1000}—Å...`);
        setTimeout(() => {
            if (this.isRunning) {
                this.connectToServer();
            }
        }, this.reconnectInterval);
    }

    sendReady() {
        const message = {
            type: 'ready',
            data: 'AI Background Agent –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToServer(message);
        this.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Agent1');
    }

    async handleServerMessage(message) {
        this.messageCount++;
        this.log(`üì® [${this.agentId}] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç ${message.sender}: ${message.type} - "${message.data}"`);

        switch (message.type) {
            case 'handshake_init':
                await this.handleHandshakeInit(message);
                break;
            case 'ping':
                this.handlePing(message);
                break;
            default:
                this.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Agent1: ${message.type}`);
        }
    }

    async handleHandshakeInit(message) {
        this.log('ü§ù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫ –æ—Ç Agent1');
        this.log(`üì• ${message.sender} —Å–∫–∞–∑–∞–ª: "${message.data}"`);

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫
        const response = {
            type: 'handshake_response',
            data: '–ü—Ä–∏–≤–µ—Ç! AI Agent –≥–æ—Ç–æ–≤!',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToServer(response);
        this.handshakeComplete = true;
        this.log('üì§ –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫ Agent1: "–ü—Ä–∏–≤–µ—Ç! AI Agent –≥–æ—Ç–æ–≤!"');
        this.log('‚úÖ –•—ç–Ω–¥—à–µ–π–∫ —Å Agent1 –∑–∞–≤–µ—Ä—à–µ–Ω');
        
        // –ü–æ—Å–ª–µ —Ö—ç–Ω–¥—à–µ–π–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º Initial Prompt
        await this.executeInitialPrompt();
    }

    async executeInitialPrompt() {
        this.log('üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Initial Prompt...');
        this.agentStatus = 'processing_initial';
        this.currentPhase = 'initial';
        
        try {
            const result = await this.aiTaskManager.executeInitialPrompt();
            this.log('‚úÖ Initial Prompt –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            this.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.summary}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await this.taskPhaseProcessor.savePhaseResult('initial', result);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            this.agentStatus = 'waiting_instructions';
            this.log('‚è≥ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...');
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Initial Prompt: ${error.message}`);
            this.agentStatus = 'error';
        }
    }

    handlePing(message) {
        if (!this.handshakeComplete) {
            this.log('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø–∏–Ω–≥ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö—ç–Ω–¥—à–µ–π–∫–∞');
            return;
        }

        this.pingCount++;
        this.log(`üèì [${this.agentId}] –ü–æ–ª—É—á–µ–Ω PING #${this.pingCount}: "${message.data}"`);

        // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–Ω–≥–æ–º
        const pongResponse = {
            type: 'pong',
            data: 'PONG! üèì (AI Agent)',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToServer(pongResponse);
        this.log(`üèì [${this.agentId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω PONG #${this.pingCount}: "${pongResponse.data}"`);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    async processExternalInstruction(instruction, source = 'unknown') {
        try {
            this.log(`üì• –ü–æ–ª—É—á–µ–Ω–∞ –≤–Ω–µ—à–Ω—è—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏–∑ ${source}:`);
            this.log(`    "${instruction}"`);
            
            this.agentStatus = 'processing_instruction';
            this.lastInstruction = {
                id: uuidv4(),
                instruction: instruction,
                source: source,
                timestamp: new Date().toISOString(),
                phase: `phase-${this.tasksCompleted + 1}`
            };
            
            this.currentPhase = this.lastInstruction.phase;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫–∞–∫ –Ω–æ–≤—É—é —Ñ–∞–∑—É
            const result = await this.aiTaskManager.processInstruction(instruction, this.currentPhase);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∞–∑—ã
            await this.taskPhaseProcessor.savePhaseResult(this.currentPhase, result);
            
            this.tasksCompleted++;
            this.agentStatus = 'waiting_instructions';
            
            this.log(`‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ (—Ñ–∞–∑–∞: ${this.currentPhase})`);
            this.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.summary}`);
            this.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...');
            
            return result;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${error.message}`);
            this.agentStatus = 'error';
            throw error;
        }
    }

    sendToServer(message) {
        if (this.client && this.isConnected) {
            this.client.write(JSON.stringify(message));
        } else {
            this.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Agent1 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ sendToBackgroundAgent
    sendToBackgroundAgent(message) {
        // –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –∞–≥–µ–Ω—Ç —Å–∞–º –∏ –µ—Å—Ç—å background agent, 
        // –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ
        this.log(`üéØ Background —Å–æ–±—ã—Ç–∏–µ: ${message}`);
    }

    getAgentStatus() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        return {
            agentId: this.agentId,
            status: this.agentStatus,
            currentPhase: this.currentPhase,
            tasksCompleted: this.tasksCompleted,
            isRunning: this.isRunning,
            sessionId: this.sessionId,
            uptime: uptime,
            interfaces: this.externalInterfaceManager.getStatus(),
            agent1Connection: {
                host: this.host,
                port: this.port,
                isConnected: this.isConnected,
                handshakeComplete: this.handshakeComplete
            },
            messageCount: this.messageCount,
            pingCount: this.pingCount,
            lastInstruction: this.lastInstruction
        };
    }

    log(message, step = null, data = null) {
        const timestamp = new Date().toISOString();
        this.stepCounter++;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        const consoleMessage = `[${timestamp}] ${message}`;
        console.log(consoleMessage);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        const stepInfo = step ? `[STEP-${step}]` : `[STEP-${this.stepCounter}]`;
        
        const fileMessage = `${timestamp} ${stepInfo} [${this.agentId}] [${this.agentStatus}] [${this.currentPhase}] [UPTIME:${uptime}s] ${message}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        let additionalData = '';
        if (data) {
            additionalData = `\n    ‚îî‚îÄ DATA: ${JSON.stringify(data, null, 2).split('\n').join('\n    ')}`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –≤–∞–∂–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º
        let stats = '';
        if (message.includes('PING') || message.includes('PONG') || message.includes('–ø–æ–¥–∫–ª—é—á') || message.includes('–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')) {
            const status = this.getAgentStatus();
            stats = `\n    ‚îî‚îÄ STATS: Status:${status.status} | Phase:${status.currentPhase} | Tasks:${status.tasksCompleted} | Interfaces:${JSON.stringify(status.interfaces)}`;
        }
        
        const fullLogEntry = fileMessage + additionalData + stats + '\n';
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        try {
            fs.appendFileSync(this.logFile, fullLogEntry);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª: ${error.message}`);
        }
    }

    showStatus() {
        const status = this.getAgentStatus();
        this.log('=== AI AGENT STATUS REPORT ===');
        this.log(`–°—Ç–∞—Ç—É—Å: ${status.status}`);
        this.log(`–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: ${status.currentPhase}`);
        this.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${status.tasksCompleted}`);
        this.log(`–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${status.uptime} —Å–µ–∫—É–Ω–¥`);
        this.log(`Session ID: ${status.sessionId}`);
        this.log(`Agent1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${status.agent1Connection.isConnected}`);
        this.log(`–í–Ω–µ—à–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: ${JSON.stringify(status.interfaces, null, 2)}`);
        this.log('=== END AI AGENT STATUS ===');
    }

    stop() {
        if (!this.isRunning) {
            return;
        }

        this.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI Background Agent...');
        this.isRunning = false;
        this.agentStatus = 'stopping';

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        this.externalInterfaceManager.stopAll();

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Agent1
        if (this.client) {
            this.client.destroy();
            this.client = null;
        }

        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log(`‚úÖ AI Background Agent –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—Å`);
        this.log(`üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${this.tasksCompleted}`);
        this.log(`üìä –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Agent1: ${this.messageCount}`);
        
        process.exit(0);
    }
}

// AI Task Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –∑–∞–¥–∞—á–∞–º–∏
class AITaskManager {
    constructor() {
        this.initialPrompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é AI –∑–∞–¥–∞—á. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞ –∏ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.";
    }

    async executeInitialPrompt() {
        // –°–∏–º—É–ª—è—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        await this.delay(2000);
        
        const analysis = {
            timestamp: new Date().toISOString(),
            prompt: this.initialPrompt,
            summary: "–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, AI –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            details: {
                systemStatus: "operational",
                availableResources: ["—Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", "—Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã", "–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"],
                capabilities: ["–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "—Ñ–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á"],
                readyForTasks: true
            },
            recommendations: [
                "–ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                "–î–æ—Å—Ç—É–ø–Ω—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: WebSocket, REST API, —Ñ–∞–π–ª–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
            ]
        };
        
        return analysis;
    }

    async processInstruction(instruction, phase) {
        // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await this.delay(1500);
        
        const result = {
            timestamp: new Date().toISOString(),
            phase: phase,
            instruction: instruction,
            summary: `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ñ–∞–∑–µ ${phase}`,
            details: {
                processingTime: "1.5s",
                status: "completed",
                actions: [
                    "–ê–Ω–∞–ª–∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                    "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                    "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
                ]
            },
            output: `–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: "${instruction}" –≤ —Ñ–∞–∑–µ ${phase}`,
            nextSteps: "–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
        };
        
        return result;
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// External Interface Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
class ExternalInterfaceManager {
    constructor(agent) {
        this.agent = agent;
        this.websocketServer = null;
        this.restServer = null;
        this.fileWatcher = null;
        this.websocketPort = 3020;
        this.restPort = 3021;
        this.interfaces = {
            websocket: 'inactive',
            rest: 'inactive',
            file: 'inactive'
        };
    }

    async startAll() {
        await this.setupWebSocketServer();
        await this.setupRESTAPI();
        await this.setupFileMonitor();
    }

    async setupWebSocketServer() {
        try {
            this.websocketServer = new WebSocket.Server({ port: this.websocketPort });
            
            this.websocketServer.on('connection', (ws) => {
                this.agent.log(`üîå WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω`);
                
                ws.on('message', async (message) => {
                    try {
                        const instruction = message.toString();
                        await this.agent.processExternalInstruction(instruction, 'websocket');
                        ws.send(JSON.stringify({ status: 'success', message: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' }));
                    } catch (error) {
                        ws.send(JSON.stringify({ status: 'error', message: error.message }));
                    }
                });
                
                ws.on('close', () => {
                    this.agent.log(`üîå WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω`);
                });
            });
            
            this.interfaces.websocket = 'active';
            this.agent.log(`‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.websocketPort}`);
            
        } catch (error) {
            this.agent.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
        }
    }

    async setupRESTAPI() {
        try {
            const app = express();
            app.use(express.json());
            
            // POST /instruction - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            app.post('/instruction', async (req, res) => {
                try {
                    const { instruction } = req.body;
                    if (!instruction) {
                        return res.status(400).json({ error: 'Instruction is required' });
                    }
                    
                    const result = await this.agent.processExternalInstruction(instruction, 'rest');
                    res.json({ status: 'success', result: result });
                    
                } catch (error) {
                    res.status(500).json({ error: error.message });
                }
            });
            
            // GET /status - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
            app.get('/status', (req, res) => {
                res.json(this.agent.getAgentStatus());
            });
            
            this.restServer = app.listen(this.restPort, () => {
                this.interfaces.rest = 'active';
                this.agent.log(`‚úÖ REST API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.restPort}`);
            });
            
        } catch (error) {
            this.agent.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ REST API: ${error.message}`);
        }
    }

    async setupFileMonitor() {
        try {
            this.fileWatcher = chokidar.watch(this.agent.instructionsDir, {
                ignored: /^\./, 
                persistent: true
            });
            
            this.fileWatcher.on('add', async (filePath) => {
                try {
                    if (path.extname(filePath) === '.txt') {
                        const instruction = fs.readFileSync(filePath, 'utf8').trim();
                        if (instruction) {
                            await this.agent.processExternalInstruction(instruction, 'file');
                            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                            const processedPath = path.join(this.agent.resultsDir, `processed-${Date.now()}-${path.basename(filePath)}`);
                            fs.renameSync(filePath, processedPath);
                        }
                    }
                } catch (error) {
                    this.agent.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`);
                }
            });
            
            this.interfaces.file = 'active';
            this.agent.log(`‚úÖ –§–∞–π–ª–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–∞–ø–∫–∏: ${this.agent.instructionsDir}`);
            
        } catch (error) {
            this.agent.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);
        }
    }

    getStatus() {
        return this.interfaces;
    }

    stopAll() {
        if (this.websocketServer) {
            this.websocketServer.close();
            this.interfaces.websocket = 'inactive';
        }
        
        if (this.restServer) {
            this.restServer.close();
            this.interfaces.rest = 'inactive';
        }
        
        if (this.fileWatcher) {
            this.fileWatcher.close();
            this.interfaces.file = 'inactive';
        }
    }
}

// Task Phase Processor - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∑–∞–º–∏ –∑–∞–¥–∞—á
class TaskPhaseProcessor {
    constructor(agent) {
        this.agent = agent;
    }

    async savePhaseResult(phase, result) {
        try {
            const resultFile = path.join(this.agent.resultsDir, `${phase}-${Date.now()}.json`);
            const resultData = {
                phase: phase,
                timestamp: new Date().toISOString(),
                sessionId: this.agent.sessionId,
                result: result
            };
            
            fs.writeFileSync(resultFile, JSON.stringify(resultData, null, 2));
            this.agent.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∞–∑—ã ${phase} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${resultFile}`);
            
        } catch (error) {
            this.agent.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–∞–∑—ã ${phase}: ${error.message}`);
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ AI –∞–≥–µ–Ω—Ç–∞
const aiAgent = new CursorAIBackgroundAgent();

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
aiAgent.start();

module.exports = CursorAIBackgroundAgent; 