/**
 * Cursor Background Agent - Simplified Agent2
 * –ü—Ä–æ—Å—Ç–æ–π –∞–≥–µ–Ω—Ç —Å TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Agent1 –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π "–ü—Ä–∏–≤–µ—Ç" –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
 */

const net = require('net');
const fs = require('fs');
const path = require('path');

class CursorBackgroundAgent {
    constructor(host = 'localhost', port = 3001) {
        this.agentId = 'Background-Agent2';
        this.host = host;
        this.port = port;
        this.startTime = new Date();
        this.sessionId = this.generateSessionId();
        this.isRunning = false;
        
        // TCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Agent1
        this.client = null;
        this.isConnected = false;
        this.handshakeComplete = false;
        this.messageCount = 0;
        this.pingCount = 0;
        this.helloCount = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 10;
        this.reconnectInterval = 2000;
        
        // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ "–ü—Ä–∏–≤–µ—Ç"
        this.helloInterval = null;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        this.logDir = path.join(__dirname, 'logs');
        this.logFile = path.join(this.logDir, `background-agent2-${this.sessionId}-${Date.now()}.log`);
        this.stepCounter = 0;
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        this.initializeLogging();
    }

    generateSessionId() {
        return Math.random().toString(36).substring(2, 15);
    }

    initializeLogging() {
        try {
            if (!fs.existsSync(this.logDir)) {
                fs.mkdirSync(this.logDir, { recursive: true });
            }
            
            const header = `
=== CURSOR BACKGROUND AGENT LOG ===
Session ID: ${this.sessionId}
Start Time: ${this.startTime.toISOString()}
PID: ${process.pid}
Target Agent1: ${this.host}:${this.port}
==========================================

`;
            fs.writeFileSync(this.logFile, header);
            console.log(`üìù Background Agent2 –ª–æ–≥–∏: ${this.logFile}`);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${error.message}`);
        }
    }

    start() {
        if (this.isRunning) {
            this.log('üîÑ Background –∞–≥–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.isRunning = true;
        
        this.log('ü§ñ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        this.log('ü§ñ    BACKGROUND AGENT STARTING');
        this.log('ü§ñ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        this.log('üöÄ –ó–∞–ø—É—Å–∫ Background Agent —Å —Ñ—É–Ω–∫—Ü–∏–µ–π "–ü—Ä–∏–≤–µ—Ç"');
        this.log(`üìã Session ID: ${this.sessionId}`);
        this.log(`üîß PID: ${process.pid}`);
        this.log(`üåê Agent1 —Å–µ—Ä–≤–µ—Ä: ${this.host}:${this.port}`);

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Agent1
        this.connectToServer();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', () => this.stop());
        process.on('SIGTERM', () => this.stop());
    }

    connectToServer() {
        this.log(`üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Agent1 ${this.host}:${this.port}...`);
        
        this.client = new net.Socket();

        this.client.connect(this.port, this.host, () => {
            this.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Agent1');
            this.isConnected = true;
            this.reconnectAttempts = 0;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.sendReady();
        });

        this.client.on('data', (data) => {
            try {
                const message = JSON.parse(data.toString());
                this.handleServerMessage(message);
            } catch (error) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Agent1: ${error.message}`);
            }
        });

        this.client.on('close', () => {
            this.log('üö™ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Agent1 –∑–∞–∫—Ä—ã—Ç–æ');
            this.isConnected = false;
            this.handshakeComplete = false;
            this.stopHelloInterval();
            this.scheduleReconnect();
        });

        this.client.on('error', (error) => {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Agent1: ${error.message}`);
            this.isConnected = false;
            this.scheduleReconnect();
        });
    }

    scheduleReconnect() {
        if (!this.isRunning) return;
        
        this.reconnectAttempts++;
        if (this.reconnectAttempts > this.maxReconnectAttempts) {
            this.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Agent1 (${this.maxReconnectAttempts})`);
            return;
        }

        this.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Agent1 #${this.reconnectAttempts} —á–µ—Ä–µ–∑ ${this.reconnectInterval/1000}—Å...`);
        setTimeout(() => {
            if (this.isRunning) {
                this.connectToServer();
            }
        }, this.reconnectInterval);
    }

    sendReady() {
        const message = {
            type: 'ready',
            data: 'Background Agent –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToServer(message);
        this.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Agent1');
    }

    handleServerMessage(message) {
        this.messageCount++;
        this.log(`üì® [${this.agentId}] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç ${message.sender}: ${message.type} - "${message.data}"`);

        switch (message.type) {
            case 'handshake_init':
                this.handleHandshakeInit(message);
                break;
            case 'ping':
                this.handlePing(message);
                break;
            default:
                this.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Agent1: ${message.type}`);
        }
    }

    handleHandshakeInit(message) {
        this.log('ü§ù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫ –æ—Ç Agent1');
        this.log(`üì• ${message.sender} —Å–∫–∞–∑–∞–ª: "${message.data}"`);

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫
        const response = {
            type: 'handshake_response',
            data: '–ü—Ä–∏–≤–µ—Ç! Background Agent –≥–æ—Ç–æ–≤!',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToServer(response);
        this.handshakeComplete = true;
        this.log('üì§ –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ö—ç–Ω–¥—à–µ–π–∫ Agent1: "–ü—Ä–∏–≤–µ—Ç! Background Agent –≥–æ—Ç–æ–≤!"');
        this.log('‚úÖ –•—ç–Ω–¥—à–µ–π–∫ —Å Agent1 –∑–∞–≤–µ—Ä—à–µ–Ω');
        
        // –ü–æ—Å–ª–µ —Ö—ç–Ω–¥—à–µ–π–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É "–ü—Ä–∏–≤–µ—Ç" –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        this.startHelloInterval();
    }

    handlePing(message) {
        if (!this.handshakeComplete) {
            this.log('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø–∏–Ω–≥ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö—ç–Ω–¥—à–µ–π–∫–∞');
            return;
        }

        this.pingCount++;
        this.log(`üèì [${this.agentId}] –ü–æ–ª—É—á–µ–Ω PING #${this.pingCount}: "${message.data}"`);

        // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–Ω–≥–æ–º
        const pongResponse = {
            type: 'pong',
            data: 'PONG! üèì (Background Agent)',
            timestamp: new Date().toISOString(),
            sender: this.agentId
        };

        this.sendToServer(pongResponse);
        this.log(`üèì [${this.agentId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω PONG #${this.pingCount}: "${pongResponse.data}"`);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ "–ü—Ä–∏–≤–µ—Ç" –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    startHelloInterval() {
        this.log('üéØ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ "–ü—Ä–∏–≤–µ—Ç" –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥...');
        
        this.helloInterval = setInterval(() => {
            this.sendHelloMessage();
        }, 10000); // 10 —Å–µ–∫—É–Ω–¥ = 10000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        this.sendHelloMessage();
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ "–ü—Ä–∏–≤–µ—Ç"
    stopHelloInterval() {
        if (this.helloInterval) {
            clearInterval(this.helloInterval);
            this.helloInterval = null;
            this.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ "–ü—Ä–∏–≤–µ—Ç"');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "–ü—Ä–∏–≤–µ—Ç" –≤ —á–∞—Ç AI-–∞–≥–µ–Ω—Ç–∞
    sendHelloMessage() {
        if (!this.isConnected || !this.handshakeComplete) {
            this.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Agent1 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ "–ü—Ä–∏–≤–µ—Ç"');
            return;
        }

        this.helloCount++;
        
        const helloMessage = {
            type: 'chat_message',
            data: '–ü—Ä–∏–≤–µ—Ç',
            timestamp: new Date().toISOString(),
            sender: this.agentId,
            messageNumber: this.helloCount
        };

        this.sendToServer(helloMessage);
        this.log(`üí¨ [${this.agentId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω "–ü—Ä–∏–≤–µ—Ç" #${this.helloCount} –≤ —á–∞—Ç AI-–∞–≥–µ–Ω—Ç–∞`);
    }

    sendToServer(message) {
        if (this.client && this.isConnected) {
            this.client.write(JSON.stringify(message));
        } else {
            this.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Agent1 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±—ç–∫–≥—Ä–∞—É–Ω–¥ AI-–∞–≥–µ–Ω—Ç–∞
    sendToBackgroundAgent(message) {
        this.log(`üéØ Background —Å–æ–±—ã—Ç–∏–µ: ${message}`);
    }

    getAgentStatus() {
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        return {
            agentId: this.agentId,
            isRunning: this.isRunning,
            sessionId: this.sessionId,
            uptime: uptime,
            agent1Connection: {
                host: this.host,
                port: this.port,
                isConnected: this.isConnected,
                handshakeComplete: this.handshakeComplete
            },
            messageCount: this.messageCount,
            pingCount: this.pingCount,
            helloCount: this.helloCount,
            helloIntervalActive: this.helloInterval !== null
        };
    }

    log(message) {
        const timestamp = new Date().toISOString();
        this.stepCounter++;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        const consoleMessage = `[${timestamp}] ${message}`;
        console.log(consoleMessage);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞
        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        const fileMessage = `${timestamp} [STEP-${this.stepCounter}] [${this.agentId}] [UPTIME:${uptime}s] ${message}\n`;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        try {
            fs.appendFileSync(this.logFile, fileMessage);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª: ${error.message}`);
        }
    }

    showStatus() {
        const status = this.getAgentStatus();
        this.log('=== BACKGROUND AGENT STATUS ===');
        this.log(`–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${status.uptime} —Å–µ–∫—É–Ω–¥`);
        this.log(`Session ID: ${status.sessionId}`);
        this.log(`Agent1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${status.agent1Connection.isConnected}`);
        this.log(`–•—ç–Ω–¥—à–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${status.agent1Connection.handshakeComplete}`);
        this.log(`–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Agent1: ${status.messageCount}`);
        this.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ PONG: ${status.pingCount}`);
        this.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ "–ü—Ä–∏–≤–µ—Ç": ${status.helloCount}`);
        this.log(`–ò–Ω—Ç–µ—Ä–≤–∞–ª "–ü—Ä–∏–≤–µ—Ç" –∞–∫—Ç–∏–≤–µ–Ω: ${status.helloIntervalActive}`);
        this.log('=== END STATUS ===');
    }

    stop() {
        if (!this.isRunning) {
            return;
        }

        this.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Background Agent...');
        this.isRunning = false;

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª "–ü—Ä–∏–≤–µ—Ç"
        this.stopHelloInterval();

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Agent1
        if (this.client) {
            this.client.destroy();
            this.client = null;
        }

        const uptime = Math.floor((new Date() - this.startTime) / 1000);
        this.log(`‚úÖ Background Agent –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—Å`);
        this.log(`üìä –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Agent1: ${this.messageCount}`);
        this.log(`üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ "–ü—Ä–∏–≤–µ—Ç": ${this.helloCount}`);
        
        process.exit(0);
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
const agent = new CursorBackgroundAgent();

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (agent.isRunning) {
        agent.showStatus();
    }
}, 30000);

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
agent.start();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = CursorBackgroundAgent; 